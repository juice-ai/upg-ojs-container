#!/bin/bash
# File: update-traefik-routes.sh
# This script reads your OJS config and generates a dynamic Traefik routing file.

set -e

# --- Configuration ---
OJS_CONFIG_FILE="./volumes/config/pkp.config.inc.php"
TRAEFIK_CONFIG_DIR="./volumes/traefik/dynamic"
TRAEFIK_ROUTER_FILE="${TRAEFIK_CONFIG_DIR}/ojs-routers.yml"
# This service name must match the service name in docker-compose.yml
TRAEFIK_SERVICE_NAME="app"
# The name of the Let's Encrypt resolver defined in docker-compose.traefik.yml
CERT_RESOLVER="leresolver"

# --- Script ---

echo "🔎 Looking for OJS config at ${OJS_CONFIG_FILE}..."

if [ ! -f "$OJS_CONFIG_FILE" ]; then
    echo "❌ Error: OJS config file not found at ${OJS_CONFIG_FILE}"
    exit 1
fi

# Create the directory for Traefik's dynamic config if it doesn't exist
mkdir -p "$TRAEFIK_CONFIG_DIR"

# Extract hostnames from all 'base_url' entries using a pipe as a sed delimiter for readability
# This finds lines like: base_url = "https://domain.one" or base_url[journal] = "http://domain.two"
HOSTNAMES=$(grep -oP '^\s*base_url.*=\s*"\K(https?://)?([^/"]+)' "$OJS_CONFIG_FILE" | \
            sed -E 's|.*//||' | \
            sort -u) # sort -u to get unique hostnames

if [ -z "$HOSTNAMES" ]; then
    echo "⚠️ Warning: No hostnames found in ${OJS_CONFIG_FILE}. Removing existing Traefik config."
    rm -f "$TRAEFIK_ROUTER_FILE"
    exit 0
fi

# Format the hostnames for Traefik's Host() rule, e.g., `host1.com`,`host2.com`
HOST_RULE=$(echo "$HOSTNAMES" | awk '{printf "`%s`," , $0}' | sed 's/,$//')

echo "Found hosts: $(echo "$HOSTNAMES" | tr '\n' ' ')"
echo "Generating Traefik config at ${TRAEFIK_ROUTER_FILE}"

# Generate the dynamic configuration file for Traefik
cat > "$TRAEFIK_ROUTER_FILE" <<EOF
# This file is auto-generated by update-traefik-routes.sh
# Do not edit manually! Changes will be overwritten.

http:
  routers:
    # Insecure router for HTTP -> HTTPS redirection
    ojs-router-insecure:
      rule: "Host(${HOST_RULE})"
      entryPoints:
        - "web"
      middlewares:
        - "redirect-to-https"
      service: "noop@internal" # No need to forward, just redirect

    # Secure router for HTTPS traffic
    ojs-router-secure:
      rule: "Host(${HOST_RULE})"
      entryPoints:
        - "websecure"
      service: "${TRAEFIK_SERVICE_NAME}@docker"
      tls:
        certResolver: "${CERT_RESOLVER}"

  middlewares:
    # Middleware to redirect HTTP to HTTPS
    redirect-to-https:
      redirectScheme:
        scheme: "https"
        permanent: true
EOF

echo "✅ Traefik dynamic configuration updated successfully."
